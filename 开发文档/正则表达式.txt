$preg  = "#^select[ ]+(?<select>.+) ";
        $preg .= "from (?:(?<app>[a-z0-9_]+)\.)?(?<table>[a-z0-9_]+)";
        $preg .= "(?:[ ]+for[ ]+(?<for>[a-z0-9,]+))?";
        $preg .= "(?: where (?<where>(?:(?! group[ ]+time | group[ ]+by | save[ ]+as ).)+))?";
        $preg .= "(?: group[ ]+by[ ]+(?<groupBy>[a-z0-9_,\.]+))?";
        $preg .= "(?: group[ ]+time[ ]+(?<groupTime>(?:(?! save[ ]+as).)+))?";
        $preg .= "(?: save[ ]+as (?<saveAs>[a-z0-9_%,\.]+))?$#i";


 if (preg_match($preg, str_replace(["\r\n", "\r", "\n"], ' ', $sql), $m))


(?<name>) 命名分组捕获


分组捕获 - ()

就是用括号把要匹配的内容扩起来

(?:pattern) 
非获取匹配，匹配pattern但不获取匹配结果，不进行存储供以后使用。这在使用或字符“(|)”来组合一个模式的各个部分是很有用。例如“industr(?:y|ies)”就是一个比“industry|industries”更简略的表达式。


(?!pattern)
非获取匹配，正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如“Windows(?!95|98|NT|2000)”能匹配“Windows3.1”中的“Windows”，但不能匹配“Windows2000”中的“Windows”。


(?=pattern)
非获取匹配，正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如，“Windows(?=95|98|NT|2000)”能匹配“Windows2000”中的“Windows”，但不能匹配“Windows3.1”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始


(?<=pattern)
非获取匹配，反向肯定预查，与正向肯定预查类似，只是方向相反。例如，“(?<=95|98|NT|2000)Windows”能匹配“2000Windows”中的“Windows”，但不能匹配“3.1Windows”中的“Windows”。

(?<!pattern)
非获取匹配，反向否定预查，与正向否定预查类似，只是方向相反。例如“(?<!95|98|NT|2000)Windows”能匹配“3.1Windows”中的“Windows”，但不能匹配“2000Windows”中的“Windows”。这个地方不正确，有问题
此处用或任意一项都不能超过2位，如“(?<!95|98|NT|20)Windows正确，“(?<!95|980|NT|20)Windows 报错，若是单独使用则无限制，如(?<!2000)Windows 正确匹配